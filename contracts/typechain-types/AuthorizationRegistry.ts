/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AuthorizationRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DELEGATION_TYPEHASH"
      | "DOMAIN_SEPARATOR"
      | "EIP712_DOMAIN_TYPEHASH"
      | "addDelegation"
      | "isDelegationActive"
      | "revokeDelegation"
      | "verifySignedDelegation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DELEGATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDelegation",
    values: [
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isDelegationActive",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDelegation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySignedDelegation",
    values: [
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DELEGATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDelegationActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySignedDelegation",
    data: BytesLike
  ): Result;
}

export interface AuthorizationRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): AuthorizationRegistry;
  waitForDeployment(): Promise<this>;

  interface: AuthorizationRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DELEGATION_TYPEHASH: TypedContractMethod<[], [string], "view">;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  EIP712_DOMAIN_TYPEHASH: TypedContractMethod<[], [string], "view">;

  addDelegation: TypedContractMethod<
    [
      authorizer: AddressLike,
      delegate: AddressLike,
      scope: BytesLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  isDelegationActive: TypedContractMethod<
    [authorizer: AddressLike, delegate: AddressLike, scope: BytesLike],
    [boolean],
    "view"
  >;

  revokeDelegation: TypedContractMethod<
    [delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  verifySignedDelegation: TypedContractMethod<
    [
      authorizer: AddressLike,
      delegate: AddressLike,
      scope: BytesLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DELEGATION_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EIP712_DOMAIN_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addDelegation"
  ): TypedContractMethod<
    [
      authorizer: AddressLike,
      delegate: AddressLike,
      scope: BytesLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isDelegationActive"
  ): TypedContractMethod<
    [authorizer: AddressLike, delegate: AddressLike, scope: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeDelegation"
  ): TypedContractMethod<[delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifySignedDelegation"
  ): TypedContractMethod<
    [
      authorizer: AddressLike,
      delegate: AddressLike,
      scope: BytesLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [boolean],
    "view"
  >;

  filters: {};
}
